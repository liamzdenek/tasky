'use strict';

var _decorateFunction = require('./decorateFunction');

var _decorateFunction2 = _interopRequireDefault(_decorateFunction);

var _globalContext = require('./globalContext');

var _globalContext2 = _interopRequireDefault(_globalContext);

var _assert = require('assert');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('decorateFunction', function () {
  it('should decorate a function', function () {
    var adder = function adder(a, b) {
      return a + b;
    };
    var type = _globalContext2.default.fn(_globalContext2.default.param('a', _globalContext2.default.number()), _globalContext2.default.param('b', _globalContext2.default.number()), _globalContext2.default.return(_globalContext2.default.number()));

    var decorated = (0, _decorateFunction2.default)(type, adder);

    console.log(decorated(1, 2));
  });

  it('should decorate a polymorphic function', function () {
    function adder(a, b) {
      return a + b;
    }
    var type = _globalContext2.default.fn(function (Adder) {
      var T = Adder.typeParameter('T', _globalContext2.default.union(_globalContext2.default.number(), _globalContext2.default.string()));
      return [_globalContext2.default.param('a', T), _globalContext2.default.param('b', T), _globalContext2.default.return(T)];
    });

    var decorated = (0, _decorateFunction2.default)(type, adder);

    console.log(decorated(1, 2));
    console.log(decorated('hello ', 'world'));
    (0, _assert.throws)(function () {
      return decorated('hello ', 123);
    });
  });

  it('should decorate a fully polymorphic function', function () {
    function adder(a, b) {
      return a + b;
    }
    var type = _globalContext2.default.fn(function (Adder) {
      var A = Adder.typeParameter('A', _globalContext2.default.union(_globalContext2.default.number(), _globalContext2.default.string()));
      var B = Adder.typeParameter('B', _globalContext2.default.union(_globalContext2.default.number(), _globalContext2.default.string()));
      return [_globalContext2.default.param('a', A), _globalContext2.default.param('b', B), _globalContext2.default.return(_globalContext2.default.union(A, B))];
    });

    var decorated = (0, _decorateFunction2.default)(type, adder);

    console.log(decorated(1, 2));
    console.log(decorated('hello ', 'world'));
    console.log(decorated('hello ', 123));
    (0, _assert.throws)(function () {
      // Ignore
      return decorated('hello ', { nope: true });
    });
  });

  it('should check a return value', function () {
    var stringer = function stringer(input) {
      return input;
    };
    var type = _globalContext2.default.fn(_globalContext2.default.param('input', _globalContext2.default.any()), _globalContext2.default.return(_globalContext2.default.string()));

    (0, _decorateFunction2.default)(type, stringer);

    //console.log(decorated(false));
  });

  it('should decorate a generator', function () {
    function* oneTwoThree() {
      yield 1;
      yield 2;
      yield 3;
    }
    var type = _globalContext2.default.fn(_globalContext2.default.return(_globalContext2.default.ref('Iterable', _globalContext2.default.number())));
    var decorated = (0, _decorateFunction2.default)(type, oneTwoThree);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = decorated()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var value = _step.value;

        console.log('got', value);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
});