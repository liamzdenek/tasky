'use strict';

var _assert = require('assert');

var _globalContext = require('./globalContext');

var _globalContext2 = _interopRequireDefault(_globalContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Type Constraints', function () {

  describe('TypeAlias TypeConstraints', function () {

    var EmailAddress = _globalContext2.default.type('EmailAddress', _globalContext2.default.string());

    it('should constrain a type', function () {
      EmailAddress.addConstraint(function (input) {
        if (input.length < 4) {
          return 'too short, cannot be a valid email address.';
        }
      }, function (input) {
        if (!/@/.test(input)) {
          return 'not a valid email address';
        }
      });
    });

    it('should accept valid input', function () {
      (0, _assert.ok)(EmailAddress.assert("foo@example.com"));
    });

    it('should reject invalid input: null', function () {
      (0, _assert.throws)(function () {
        return EmailAddress.assert(null);
      });
    });

    it('should reject invalid input: n@n', function () {
      (0, _assert.throws)(function () {
        return EmailAddress.assert('n@n');
      });
    });

    it('should reject invalid input: foo', function () {
      (0, _assert.throws)(function () {
        return EmailAddress.assert('foo');
      });
    });

    it('should reject invalid input: [1, 2, 3]', function () {
      (0, _assert.throws)(function () {
        return EmailAddress.assert([1, 2, 3]);
      });
    });
  });

  describe('ObjectTypeProperty Constraints', function () {

    var User = _globalContext2.default.type('User', _globalContext2.default.object({
      username: _globalContext2.default.string()
    }));

    User.getProperty('username').addConstraint(function (input) {
      if (!/^([A-Z][A-Z0-9]*)$/i.test(input)) {
        return 'must be alphanumeric and start with a letter, no spaces.';
      }
    });

    it('should accept valid input', function () {
      User.assert({
        username: 'fine'
      });
    });

    it('should reject invalid input', function () {
      (0, _assert.throws)(function () {
        return User.assert({
          username: false
        });
      });
    });

    it('should reject more invalid input', function () {
      (0, _assert.throws)(function () {
        return User.assert({
          username: 'not fine'
        });
      });
    });
  });
});