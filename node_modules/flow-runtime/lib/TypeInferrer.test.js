'use strict';

var _assert = require('assert');

var _globalContext = require('./globalContext');

var _globalContext2 = _interopRequireDefault(_globalContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('TypeInferrer', function () {

  function test(input, expected) {
    var type = _globalContext2.default.typeOf(input);
    it('should infer ' + expected, function () {
      (0, _assert.equal)(type.toString(), expected);
    });

    it('should be acceptable to the infered type', function () {
      (0, _assert.ok)(type.accepts(input));
    });
  }

  var sally = {
    id: 123,
    name: 'Sally',
    addresses: [{
      line1: '123 Fake Street',
      isActive: true
    }, {
      line1: '456 Fake Street',
      isActive: false
    }]
  };

  test('hello world', 'string');
  test(123, 'number');
  test(false, 'boolean');
  test(new Date(), 'Date');
  test([1, 2, 3], 'Array<number>');
  test([1, false, 'foo'], 'Array<number | boolean | string>');
  test({
    foo: 123,
    bar: false,
    baz: new Map([['a', 1], [true, false], [123, 'yes']]),
    method: function method(foo, bar) {
      return bar;
    }
  }, '{\n  foo: number;\n  bar: boolean;\n  baz: Map<string | boolean | number, number | boolean | string>;\n  method: (a: *, b: *) => *;\n}');
  test(sally, '{\n  id: number;\n  name: string;\n  addresses: Array<{\n    line1: string;\n    isActive: boolean;\n  }>;\n}');
});