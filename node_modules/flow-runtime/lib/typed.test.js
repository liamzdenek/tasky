'use strict';

var _assert = require('assert');

var _globalContext = require('./globalContext');

var _globalContext2 = _interopRequireDefault(_globalContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var no = function no(input) {
  return (0, _assert.ok)(!input);
};

describe('Typed API', function () {
  it('should check a string', function () {
    var type = _globalContext2.default.string();
    (0, _assert.ok)(type.accepts('helo world'));
    no(type.accepts(false));
  });

  it('should check a simple object', function () {
    var type = _globalContext2.default.object(_globalContext2.default.property('foo', _globalContext2.default.boolean()), _globalContext2.default.property('bar', _globalContext2.default.string('hello')));

    (0, _assert.ok)(type.accepts({
      foo: true,
      bar: 'hello'
    }));
  });

  it('should check a simple object with shortcut syntax', function () {
    var type = _globalContext2.default.exactObject({
      foo: _globalContext2.default.boolean(),
      bar: _globalContext2.default.string()
    });

    (0, _assert.ok)(type.accepts({
      foo: true,
      bar: 'hello'
    }));

    no(type.accepts({
      foo: true,
      bar: 'hello',
      baz: 44
    }));

    no(type.accepts({
      foo: 123
    }));
  });

  it('should check an exact object', function () {
    var type = _globalContext2.default.object({
      foo: _globalContext2.default.boolean(),
      bar: _globalContext2.default.string()
    });

    (0, _assert.ok)(type.accepts({
      foo: true,
      bar: 'hello'
    }));

    no(type.accepts({
      foo: 123
    }));
  });

  it('should make a tuple type', function () {
    var type = _globalContext2.default.tuple(_globalContext2.default.string(), _globalContext2.default.number(), _globalContext2.default.boolean());

    (0, _assert.ok)(type.accepts(['hello', 213, true]));
    (0, _assert.ok)(type.accepts(['hello', 213, true, 'still ok']));
    no(type.accepts(['hello', 213, 'nah']));
  });

  it('should declare a named type', function () {
    var User = _globalContext2.default.declare('User', _globalContext2.default.object(_globalContext2.default.property('id', _globalContext2.default.number()), _globalContext2.default.property('name', _globalContext2.default.string())));

    User.addConstraint(function (input) {
      if (input.name.length <= 2) {
        return "Name is too short!";
      } else if (input.name.length >= 45) {
        return "Name is too long!";
      }
    });

    no(User.accepts({
      id: 123,
      name: false
    }));

    no(User.accepts({
      id: 123,
      name: ''
    }));
    (0, _assert.ok)(User.accepts({
      id: 123,
      name: 'this is valid'
    }));
    (0, _assert.ok)(User.accepts({
      id: 123,
      name: 'this is valid',
      extra: 'okay'
    }));
  });

  it('should use a Map<string, number>', function () {
    var type = _globalContext2.default.ref(Map, _globalContext2.default.string(), _globalContext2.default.number());
    (0, _assert.ok)(type.accepts(new Map()));
    (0, _assert.ok)(type.accepts(new Map([['valid', 123]])));
    no(type.accepts(new Map([['valid', 123], ['notvalid', false]])));
  });

  it('should make a simple function type', function () {
    var type = _globalContext2.default.fn(_globalContext2.default.param('input', _globalContext2.default.boolean()), _globalContext2.default.param('etc', _globalContext2.default.boolean(), true), _globalContext2.default.return(_globalContext2.default.string()));

    var good = function good(input) {
      return input ? 'yes' : 'no';
    };
    var better = function better(input, etc) {
      return input && etc ? 'yes' : 'no';
    };
    var bad = function bad() {
      return undefined;
    };
    (0, _assert.ok)(type.accepts(good));
    (0, _assert.ok)(type.accepts(better));
    no(type.accepts(bad));
  });

  it('should make a parameterized function type', function () {
    var type = _globalContext2.default.fn(function (fn) {
      var T = fn.typeParameter('T', _globalContext2.default.union(_globalContext2.default.string(), _globalContext2.default.number()));
      return [_globalContext2.default.param('input', T), _globalContext2.default.param('etc', _globalContext2.default.boolean(), true), _globalContext2.default.return(_globalContext2.default.nullable(T))];
    });

    function good(input) {
      return input;
    }
    function better(input, etc) {
      return etc ? input : null;
    }
    function bad() {
      return;
    }
    (0, _assert.ok)(type.accepts(good));
    (0, _assert.ok)(type.accepts(better));
    no(type.accepts(bad));
  });

  it('should build a tree-like object', function () {
    var Tree = _globalContext2.default.type('Tree', function (Tree) {
      var T = Tree.typeParameter('T');
      return _globalContext2.default.object(_globalContext2.default.property('value', T), _globalContext2.default.property('left', _globalContext2.default.nullable(_globalContext2.default.ref(Tree, T))), _globalContext2.default.property('right', _globalContext2.default.nullable(_globalContext2.default.ref(Tree, T))));
    });
    var candidate = {
      value: 'hello world',
      left: null,
      right: {
        value: 'foo',
        left: null,
        right: null
      }
    };
    (0, _assert.ok)(Tree.assert(candidate));
  });

  it('should handle named types', function () {
    var UserEmailAddress = _globalContext2.default.type('UserEmailAddress', _globalContext2.default.string());
    UserEmailAddress.addConstraint(function (input) {
      if (!/@/.test(input)) {
        return "must be a valid email address";
      }
    });

    var User = _globalContext2.default.type('User', _globalContext2.default.object(_globalContext2.default.property('id', _globalContext2.default.number()), _globalContext2.default.property('name', _globalContext2.default.string()), _globalContext2.default.property('email', UserEmailAddress)));

    var sally = {
      id: 123,
      name: 'Sally',
      email: 'invalid'
    };

    (0, _assert.throws)(function () {
      return User.assert(sally);
    });
    sally.email = 'sally@example.com';
    User.assert(sally);
  });

  it('should handle Class<User>', function () {
    var _dec, _class, _dec2, _class2;

    var User = (_dec = _globalContext2.default.decorate(_globalContext2.default.object(_globalContext2.default.property('id', _globalContext2.default.number()), _globalContext2.default.property('name', _globalContext2.default.string()), _globalContext2.default.property('email', _globalContext2.default.string()))), _dec(_class = function User() {
      _classCallCheck(this, User);
    }) || _class);

    var AdminUser = function (_User) {
      _inherits(AdminUser, _User);

      function AdminUser() {
        _classCallCheck(this, AdminUser);

        return _possibleConstructorReturn(this, (AdminUser.__proto__ || Object.getPrototypeOf(AdminUser)).apply(this, arguments));
      }

      return AdminUser;
    }(User);

    var Role = (_dec2 = _globalContext2.default.decorate(_globalContext2.default.object(_globalContext2.default.property('name', _globalContext2.default.string()))), _dec2(_class2 = function Role() {
      _classCallCheck(this, Role);
    }) || _class2);


    var INameable = _globalContext2.default.type('Nameable', _globalContext2.default.object(_globalContext2.default.property('name', _globalContext2.default.string())));
    var INomable = _globalContext2.default.type('Nameable', _globalContext2.default.object(_globalContext2.default.property('nom', _globalContext2.default.string())));
    var INameableClass = _globalContext2.default.ref('Class', INameable);
    var INomableClass = _globalContext2.default.ref('Class', INomable);

    var IUserClass = _globalContext2.default.ref('Class', _globalContext2.default.ref(User));
    var IAdminUserClass = _globalContext2.default.ref('Class', _globalContext2.default.ref(AdminUser));
    no(IUserClass.accepts(Role));
    (0, _assert.ok)(IUserClass.accepts(User));
    (0, _assert.ok)(IUserClass.accepts(AdminUser));

    no(IAdminUserClass.accepts(Role));
    no(IAdminUserClass.accepts(User));
    (0, _assert.ok)(IAdminUserClass.accepts(AdminUser));

    (0, _assert.ok)(INameableClass.accepts(User));
    (0, _assert.ok)(INameableClass.accepts(Role));
    (0, _assert.ok)(INameableClass.accepts(AdminUser));
    no(INomableClass.accepts(User));

    //t.ref(Map, t.string(), t.number()).assert(new Map([['hello', false]]));
  });

  it('should $Diff<A, B>', function () {
    var A = _globalContext2.default.object(_globalContext2.default.property('name', _globalContext2.default.string()), _globalContext2.default.property('email', _globalContext2.default.string()));
    var B = _globalContext2.default.object(_globalContext2.default.property('email', _globalContext2.default.string('example@example.com')));

    var C = _globalContext2.default.ref('$Diff', A, B);

    no(C.accepts({}));
    (0, _assert.ok)(C.accepts({ name: 'Alice' }));
    (0, _assert.ok)(C.accepts({ name: 'Alice', email: 'alice@example.com' }));
    no(C.accepts({ email: 'alice@example.com' }));
    no(C.accepts({ name: false, email: 'alice@example.com' }));
  });

  it('should $Shape<A>', function () {
    var A = _globalContext2.default.object(_globalContext2.default.property('name', _globalContext2.default.string()), _globalContext2.default.property('email', _globalContext2.default.string()));
    var B = _globalContext2.default.ref('$Shape', A);

    (0, _assert.ok)(B.accepts({}));
    (0, _assert.ok)(B.accepts({ name: 'Alice' }));
    (0, _assert.ok)(B.accepts({ name: 'Alice', email: 'alice@example.com' }));
    no(B.accepts({ nope: false }));
    no(B.accepts({ name: false, email: 'alice@example.com' }));
    no(B.accepts({ name: 'Alice', email: 'alice@example.com', extra: true }));
  });

  it('should $Keys<A>', function () {
    var A = _globalContext2.default.object(_globalContext2.default.property('name', _globalContext2.default.string()), _globalContext2.default.property('email', _globalContext2.default.string()));
    var B = _globalContext2.default.ref('$Keys', A);

    (0, _assert.ok)(B.accepts('name'));
    (0, _assert.ok)(B.accepts('email'));
    no(B.accepts('nope'));
    no(B.accepts(false));
    no(B.accepts({}));
  });

  it('should $Keys<typeOf A>', function () {
    var A = _globalContext2.default.typeOf({
      name: 'Alice',
      email: 'example@example.com'
    });
    var B = _globalContext2.default.ref('$Keys', A);

    (0, _assert.ok)(B.accepts('name'));
    (0, _assert.ok)(B.accepts('email'));
    no(B.accepts('nope'));
    no(B.accepts(false));
    no(B.accepts({}));
  });

  it.skip('should $ObjMap<K, V>', function () {
    var K = _globalContext2.default.object(_globalContext2.default.property('name', _globalContext2.default.string()), _globalContext2.default.property('email', _globalContext2.default.string()));
    var V = _globalContext2.default.fn(function (fn) {
      var K = fn.typeParameter('K');
      var V = fn.typeParameter('V');
      return [_globalContext2.default.param('key', K), _globalContext2.default.param('value', V), _globalContext2.default.return(_globalContext2.default.tuple(K, V))];
    });
    var B = _globalContext2.default.ref('$ObjMap', K, V);

    B.assert({
      name: ['name', 'Hello'],
      email: ['email', 'World']
    });
    (0, _assert.ok)(B.accepts({}));
    (0, _assert.ok)(B.accepts({ name: 'Alice' }));
    (0, _assert.ok)(B.accepts({ name: 'Alice', email: 'alice@example.com' }));
    no(B.accepts({ nope: false }));
    no(B.accepts({ name: false, email: 'alice@example.com' }));
    no(B.accepts({ name: 'Alice', email: 'alice@example.com', extra: true }));
  });

  it('should build an object', function () {
    _globalContext2.default.object(_globalContext2.default.property('foo', _globalContext2.default.string('bar')), _globalContext2.default.property('qux', _globalContext2.default.union(_globalContext2.default.string(), _globalContext2.default.number(), _globalContext2.default.boolean())), _globalContext2.default.property('nested', _globalContext2.default.object(_globalContext2.default.property('again', _globalContext2.default.object(_globalContext2.default.indexer('nom', _globalContext2.default.string(), _globalContext2.default.any()), _globalContext2.default.property('hello', _globalContext2.default.string('world')), _globalContext2.default.property('bar', _globalContext2.default.string()), _globalContext2.default.property('meth', _globalContext2.default.fn(_globalContext2.default.param('a', _globalContext2.default.boolean(false)), _globalContext2.default.return(_globalContext2.default.string()))), _globalContext2.default.method('m', function (fn) {
      var T = fn.typeParameter('T');
      return [_globalContext2.default.param('a', T), _globalContext2.default.return(T)];
    }), _globalContext2.default.property('typed', _globalContext2.default.fn(function (fn) {
      var T = fn.typeParameter('T', _globalContext2.default.string());
      return [_globalContext2.default.param('input', T), _globalContext2.default.return(_globalContext2.default.object(_globalContext2.default.property('nn', T)))];
    })))))));
  });
});