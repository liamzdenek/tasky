'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Type2 = require('./Type');

var _Type3 = _interopRequireDefault(_Type2);

var _PartialType = require('./PartialType');

var _PartialType2 = _interopRequireDefault(_PartialType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ParameterizedFunctionType = function (_Type) {
  _inherits(ParameterizedFunctionType, _Type);

  function ParameterizedFunctionType() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ParameterizedFunctionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ParameterizedFunctionType.__proto__ || Object.getPrototypeOf(ParameterizedFunctionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedFunctionType', _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ParameterizedFunctionType, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      return this.partial.collectErrors(validation, path, input);
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.partial.accepts(input);
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      return this.partial.acceptsType(input);
    }
  }, {
    key: 'acceptsParams',
    value: function acceptsParams() {
      var _partial$type;

      return (_partial$type = this.partial.type).acceptsParams.apply(_partial$type, arguments);
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return this.partial.type.acceptsReturn(input);
    }
  }, {
    key: 'assertParams',
    value: function assertParams() {
      var _partial$type2;

      return (_partial$type2 = this.partial.type).assertParams.apply(_partial$type2, arguments);
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      return this.partial.type.assertReturn(input);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _partial;

      return (_partial = this.partial).unwrap.apply(_partial, arguments);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var partial = this.partial;
      var type = partial.type,
          typeParameters = partial.typeParameters;

      if (typeParameters.length === 0) {
        return type.toString();
      }
      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }
      return '<' + items.join(', ') + '> ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var partial = this.partial;

      return partial.toJSON();
    }
  }, {
    key: 'partial',
    get: function get() {
      var context = this.context,
          bodyCreator = this.bodyCreator;

      var target = new _PartialType2.default(context);
      var body = bodyCreator(target);
      target.type = context.function.apply(context, _toConsumableArray(body));
      return target;
    }
  }, {
    key: 'typeParameters',
    get: function get() {
      return this.partial.typeParameters;
    }
  }, {
    key: 'params',
    get: function get() {
      return this.partial.type.params;
    }
  }, {
    key: 'rest',
    get: function get() {
      return this.partial.type.rest;
    }
  }, {
    key: 'returnType',
    get: function get() {
      return this.partial.type.returnType;
    }
  }]);

  return ParameterizedFunctionType;
}(_Type3.default);

exports.default = ParameterizedFunctionType;