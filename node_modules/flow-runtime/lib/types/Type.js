'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _makeError = require('../makeError');

var _makeError2 = _interopRequireDefault(_makeError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * # Type
 *
 * This is the base class for all types.
 */
var Type = function () {
  function Type(context) {
    _classCallCheck(this, Type);

    this.typeName = 'Type';

    this.context = context;
  }

  _createClass(Type, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      return false;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'assert',
    value: function assert(input) {
      var error = (0, _makeError2.default)(this, input);
      if (error) {
        if (typeof Error.captureStackTrace === 'function') {
          Error.captureStackTrace(error, this.assert);
        }
        throw error;
      }
      return input;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }

    // Issue 252

  }, {
    key: Symbol.hasInstance,
    value: function value(input) {
      return this.accepts(input);
    }
  }, {
    key: 'toString',
    value: function toString() {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);

  return Type;
}();

exports.default = Type;